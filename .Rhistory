for (i in 1:rep) {
confusion_mod = as.data.frame((conf_mat = table(prediction[,((rep*2)-i+1)],prediction[,i], dnn=list("Observed","Predicted"))))
confusion_mod$Observed <- as.numeric(confusion_mod$Observed)
confusion_mod$Predicted <- as.numeric(confusion_mod$Predicted)
for (j in 1:max(confusion_mod$Observed)) {
for (k in 1:max(confusion_mod$Predicted)) {
df_mod[df_mod$Observed == j & df_mod$Predicted == k,3] <- df_mod[df_mod$Observed == j & df_mod$Predicted == k,3]+ confusion_mod[confusion_mod$Observed == j & confusion_mod$Predicted == k,3]
df_mod <- as.data.frame(df_mod)
}
}
}
View(df_mod)
df_mod_pourc <- 100*df_mod/(rep*2066) #on veut des pourcentages
ggplot(df_mod_pourc, aes(x = Observed, y = Predicted, fill = Freq))+
geom_tile()+
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low="#FFFF88",high="red")+
coord_fixed()+
theme_minimal()+ggtitle("Matrice de confusion moyenne modèle multinomiale")+
theme(axis.text = element_text(size = 12))+
theme(axis.title = element_text(size = 14))+
theme(plot.title = element_text(hjust = 0.5))
df_mod_pourc <-df_mod/rep
ggplot(df_mod_pourc, aes(x = Observed, y = Predicted, fill = Freq))+
geom_tile()+
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low="#FFFF88",high="red")+
coord_fixed()+
theme_minimal()+ggtitle("Matrice de confusion moyenne modèle multinomiale")+
theme(axis.text = element_text(size = 12))+
theme(axis.title = element_text(size = 14))+
theme(plot.title = element_text(hjust = 0.5))
mean_accuracy <- 0
for (i in 1:7) {
mean_accuracy <- mean_accuracy+df_mod_pourc[df_mod_pourc$Observed==i & df_mod_pourc$Predicted==i,3]
}
df_mod_pourc[df_mod_pourc$Observed==i & df_mod_pourc$Predicted==i,3]
de
str(df_mod_pours)
str(df_mod_pourc)
mean_accuracy <- 0
for (i in 1:7) {
mean_accuracy <- mean_accuracy+df_mod_pourc[df_mod_pourc$Observed==i & df_mod_pourc$Predicted==i,3]
print(mean_accuracy)
}
View(df_mod_pourc)
df_mod_pourc[df_mod_pourc$Observed==1 & df_mod_pourc$Predicted==1,3]
df_mod_pourc[df_mod_pourc$Observed==1 & df_mod_pourc$Predicted==1,3]
df_mod_pourc[df_mod_pourc$Observed==1 & df_mod_pourc$Predicted==1,]
df_mod_pourc$Freq <-df_mod$Predicted/rep
ggplot(df_mod_pourc, aes(x = Observed, y = Predicted, fill = Freq))+
geom_tile()+
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low="#FFFF88",high="red")+
coord_fixed()+
theme_minimal()+ggtitle("Matrice de confusion moyenne modèle multinomiale")+
theme(axis.text = element_text(size = 12))+
theme(axis.title = element_text(size = 14))+
theme(plot.title = element_text(hjust = 0.5))
df_mod_pourc<-df_mod
df_mod_pourc$Freq <-df_mod_pourc$Predicted/rep
ggplot(df_mod_pourc, aes(x = Observed, y = Predicted, fill = Freq))+
geom_tile()+
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low="#FFFF88",high="red")+
coord_fixed()+
theme_minimal()+ggtitle("Matrice de confusion moyenne modèle multinomiale")+
theme(axis.text = element_text(size = 12))+
theme(axis.title = element_text(size = 14))+
theme(plot.title = element_text(hjust = 0.5))
df_mod_pourc<-df_mod
df_mod_pourc$Freq <-df_mod_pourc$Freq/rep
ggplot(df_mod_pourc, aes(x = Observed, y = Predicted, fill = Freq))+
geom_tile()+
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low="#FFFF88",high="red")+
coord_fixed()+
theme_minimal()+ggtitle("Matrice de confusion moyenne modèle multinomiale")+
theme(axis.text = element_text(size = 12))+
theme(axis.title = element_text(size = 14))+
theme(plot.title = element_text(hjust = 0.5))
mean_accuracy <- 0
for (i in 1:7) {
mean_accuracy <- mean_accuracy + df_mod_pourc[df_mod_pourc$Observed==i & df_mod_pourc$Predicted==i,3]
print(mean_accuracy)
}
mean_accuracy/10
ggplot(df_mod_pourc, aes(x = Observed, y = Predicted, fill = Freq))+
geom_tile()+
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low="#FFFF88",high="red")+
coord_fixed()+
theme_minimal()+ggtitle("Matrice de confusion moyenne modèle multinomiale")+
theme(axis.text = element_text(size = 12))+
theme(axis.title = element_text(size = 14))+
theme(plot.title = element_text(hjust = 0.5))
mean_accuracy
mean_accuracy/2066
print(paste("l'accuracy est de :", mean_accuracy/2066))
mean_accuracy <- c()
for (i in 1:7) {
mean_accuracy <- c(mean_accuracy, df_mod[df_mod$Observed==i & df_mod$Predicted==i,3])
}
View(confusion_mod)
accuracy_mod <- c()
for (k in 1:rep) {
mean_accuracy <- 0
df <- prediction[[k]]
df$Observed <- as.numeric(df$Observed)
df$Predicted <- as.numeric(df$Predicted)
for (i in 1:max(df$Observed)) {
mean_accuracy <- mean_accuracy + df[df$Observed==i & df$Predicted==i,3]
}
accuracy_mod[k]<-mean_accuracy/2066
}
accuracy_mod <- c()
for (k in 1:rep) {
mean_accuracy <- 0
df <- prediction[[k]]
df <- as.data.frame(df)
df$Observed <- as.numeric(df$Observed)
df$Predicted <- as.numeric(df$Predicted)
for (i in 1:max(df$Observed)) {
mean_accuracy <- mean_accuracy + df[df$Observed==i & df$Predicted==i,3]
}
accuracy_mod[k]<-mean_accuracy/2066
}
mean_accuracy
mean_accuracy <- 0
df <- prediction[[k]]
View(prediction)
df_mod <- matrix(c(rep(seq(1,7),7),
rep(1,7),
rep(2,7),
rep(3,7),
rep(4,7),
rep(5,7),
rep(6,7),
rep(7,7),rep(0,49)),byrow = FALSE,nrow = 49,ncol = 3)
df_mod <- as.data.frame(df_mod)
colnames(df_mod) <- c("Observed","Predicted","Freq")
confusion_mod <- NA
accuracy_mod <- c()
for (i in 1:rep) {
confusion_mod = as.data.frame((conf_mat = table(prediction[,((rep*2)-i+1)],prediction[,i], dnn=list("Observed","Predicted"))))
confusion_mod$Observed <- as.numeric(confusion_mod$Observed)
confusion_mod$Predicted <- as.numeric(confusion_mod$Predicted)
for (j in 1:max(confusion_mod$Observed)) {
for (k in 1:max(confusion_mod$Predicted)) {
df_mod[df_mod$Observed == j & df_mod$Predicted == k,3] <- df_mod[df_mod$Observed == j & df_mod$Predicted == k,3]+ confusion_mod[confusion_mod$Observed == j & confusion_mod$Predicted == k,3]
df_mod <- as.data.frame(df_mod)
}
#calcul de l'accuracy
mean_accuracy <- 0
for (k in 1:max(confusion_mod$Observed)) {
mean_accuracy <- mean_accuracy + confusion_mod[confusion_mod$Observed==k & confusion_mod$Predicted==k,3]
}
accuracy_mod[i]<-mean_accuracy/2066
}
}
confusion_mod <- NA
accuracy_mod <- c()
confusion_mod = as.data.frame((conf_mat = table(prediction[,((rep*2)-i+1)],prediction[,i], dnn=list("Observed","Predicted"))))
confusion_mod$Observed <- as.numeric(confusion_mod$Observed)
confusion_mod$Predicted <- as.numeric(confusion_mod$Predicted)
#calcul de l'accuracy
mean_accuracy <- 0
for (k in 1:max(confusion_mod$Observed)) {
mean_accuracy <- mean_accuracy + confusion_mod[confusion_mod$Observed==k & confusion_mod$Predicted==k,3]
}
#calcul de l'accuracy
mean_accuracy <- 0
mean_accuracy <- mean_accuracy + confusion_mod[confusion_mod$Observed==k & confusion_mod$Predicted==k,3]
confusion_mod[confusion_mod$Observed==k & confusion_mod$Predicted==k,3]
mean_accuracy <- 0
confusion_mod = as.data.frame((conf_mat = table(prediction[,((rep*2)-i+1)],prediction[,i], dnn=list("Observed","Predicted"))))
confusion_mod$Observed <- as.numeric(confusion_mod$Observed)
confusion_mod$Predicted <- as.numeric(confusion_mod$Predicted)
str(confusion_mod[confusion_mod$Observed==k & confusion_mod$Predicted==k,])
confusion_mod[confusion_mod$Observed==j & confusion_mod$Predicted==j,3]
df_mod <- matrix(c(rep(seq(1,7),7),
rep(1,7),
rep(2,7),
rep(3,7),
rep(4,7),
rep(5,7),
rep(6,7),
rep(7,7),rep(0,49)),byrow = FALSE,nrow = 49,ncol = 3)
df_mod <- as.data.frame(df_mod)
colnames(df_mod) <- c("Observed","Predicted","Freq")
confusion_mod <- NA
accuracy_mod <- c()
for (i in 1:rep) {
mean_accuracy <- 0
confusion_mod = as.data.frame((conf_mat = table(prediction[,((rep*2)-i+1)],prediction[,i], dnn=list("Observed","Predicted"))))
confusion_mod$Observed <- as.numeric(confusion_mod$Observed)
confusion_mod$Predicted <- as.numeric(confusion_mod$Predicted)
for (j in 1:max(confusion_mod$Observed)) {
for (k in 1:max(confusion_mod$Predicted)) {
df_mod[df_mod$Observed == j & df_mod$Predicted == k,3] <- df_mod[df_mod$Observed == j & df_mod$Predicted == k,3]+ confusion_mod[confusion_mod$Observed == j & confusion_mod$Predicted == k,3]
df_mod <- as.data.frame(df_mod)
}
#calcul de l'accuracy
mean_accuracy <- mean_accuracy + confusion_mod[confusion_mod$Observed==j & confusion_mod$Predicted==j,3]
}
accuracy_mod<-c(accuracy_mod,mean_accuracy/2066)
}
df_mod_pourc<-df_mod
df_mod_pourc$Freq <-df_mod_pourc$Freq/rep
ggplot(df_mod_pourc, aes(x = Observed, y = Predicted, fill = Freq))+
geom_tile()+
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low="#FFFF88",high="red")+
coord_fixed()+
theme_minimal()+ggtitle("Matrice de confusion moyenne modèle multinomiale")+
theme(axis.text = element_text(size = 12))+
theme(axis.title = element_text(size = 14))+
theme(plot.title = element_text(hjust = 0.5))
print(paste("l'accuracy est de :", round(mean_accuracy/2066)))
View(mod)
print(paste("l'accuracy est de :", mean(accuracy_mod)," et d'écart type, ", sd(accuracy_mod)))
occurence_var <- matrix(0,nrow = 54,ncol=7) # contient en ligne la somme des coefficients Beta non nuls au cours des répétitions du modele pour chaque classe en colonne
for (i in 1:rep) {
for (j in 1:7) {
occurence_var[(which(L_coeffs[[i]][[j]] != 0)),j] <- (occurence_var[(which(L_coeffs[[i]][[j]] != 0)),j]+ 1)
}
}
View(occurence_var)
View(L_coeffs)
L_coeffs[[]]
L_coeffs[[1]]
occurence_var <- matrix(0,nrow = 70,ncol=7) # contient en ligne la somme des coefficients Beta non nuls au cours des répétitions du modele pour chaque classe en colonne
for (i in 1:rep) {
for (j in 1:7) {
occurence_var[(which(L_coeffs[[i]][[j]] != 0)),j] <- (occurence_var[(which(L_coeffs[[i]][[j]] != 0)),j]+ 1)
}
}
#quelles variables ne sont pas présentes plus de 80% des fois ?
occurence_var_pourcent <- apply(occurence_var, c(1,2), function(X) X*100/rep)
occurence_inf80 <- list()
for (i in 1:7) {
occurence_inf80[[i]] <- c("intercept",colnames(Cov_red))[which(occurence_var_pourcent[,i]<80)]
print(occurence_inf80[[i]])
}
for (i in 1:7) {
occurence_inf80[[i]] <- c("intercept",colnames(Xforest_red_cr))[which(occurence_var_pourcent[,i]<80)]
print(occurence_inf80[[i]])
}
L_coeffs[[1]]$`1`
L_coeffs[[1]]$`1`[,1]
row.names(L_coeffs[[1]]$`1`)
for (i in 1:7) {
occurence_inf80[[i]] <- c("intercept",row.names(L_coeffs[[1]]$`1`))[which(occurence_var_pourcent[,i]<80)]
print(occurence_inf80[[i]])
}
View(occurence_inf80)
row.names(L_coeffs[[1]]$`1`))
row.names(L_coeffs[[1]]$`1`)
View(occurence_inf80)
occurence_inf80[[1]]
occurence_inf80[[2]]
occurence_inf80[[1]]
occurence_inf80[[2]]
occurence_inf80[[3]]
occurence_inf80[[4]]
occurence_inf80[[5]]
occurence_inf80[[6]]
occurence_inf80[[7]]
ggplot(df_mod_pourc, aes(x = Observed, y = Predicted, fill = Freq))+
geom_tile()+
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low="#FFFF88",high="red")+
coord_fixed()+
theme_minimal()+ggtitle("Matrice de confusion moyenne modèle multinomiale")+
theme(axis.text = element_text(size = 12))+
theme(axis.title = element_text(size = 14))+
theme(plot.title = element_text(hjust = 0.5))
L_coeff[[1]]
View(L_coeffs)
L_coeffs[[1]]$`&`
L_coeffs[[1]]$`1`
L_coeffs[[1]]$`1`
L_coeffs[[1]]$`1`["Elevation:Wilderness_Area_2"]
L_coeffs[[1]]$`1`[17]
L_coeffs[[1]]$`1`[]
L_coeffs[[1]]$`1`[55]
L_coeffs[[1]]$`1`[56]
L_coeffs[[1]]$`1`[]
L_coeffs[[1]]$`1`[70]
L_coeffs[[2]]$`1`[70]
L_coeffs[[3]]$`1`[70]
el_wa <- matrix(NA,nrow = rep,ncol = 7)
hdt_wa <- matrix(NA,nrow = rep,ncol = 7)
for (i in 1:7) {
for (j in 1:7) {
el_wa[i,j] <- L_coeffs[[i]]$`j`[56] #coefficient de l'interaction elevation, wilderness area 2
hdt_wa[i,j] <- L_coeffs[[i]]$`j`[70] #coefficient de l'interaction horizontal distance to roadway, wilderness area 4
}
}
L_coeffs[[i]]$`j`[56]
L_coeffs[[i]]$j[56]
L_coeffs[[i]][[j]]
el_wa <- matrix(NA,nrow = rep,ncol = 7)
hdt_wa <- matrix(NA,nrow = rep,ncol = 7)
for (i in 1:7) {
for (j in 1:7) {
el_wa[i,j] <- L_coeffs[[i]][[j]][56] #coefficient de l'interaction elevation, wilderness area 2
hdt_wa[i,j] <- L_coeffs[[i]][[j]][70] #coefficient de l'interaction horizontal distance to roadway, wilderness area 4
}
}
View(el_wa)
el_wa <- matrix(NA,nrow = rep,ncol = 7)
hdt_wa <- matrix(NA,nrow = rep,ncol = 7)
for (i in 1:10) {
for (j in 1:7) {
el_wa[i,j] <- L_coeffs[[i]][[j]][56] #coefficient de l'interaction elevation, wilderness area 2
hdt_wa[i,j] <- L_coeffs[[i]][[j]][70] #coefficient de l'interaction horizontal distance to roadway, wilderness area 4
}
}
apply(el_wa,MARGIN = 2, c(mean, sd))
apply(el_wa,MARGIN = 2, mean)
apply(el_wa,MARGIN = 2, mean)
apply(el_wa,MARGIN = 2, sd)
apply(hdt_wa,MARGIN = 2, mean)
apply(hdt_wa,MARGIN = 2, sd)
interactions <- cbind(apply(el_wa,MARGIN = 2, mean),
apply(el_wa,MARGIN = 2, sd),
apply(hdt_wa,MARGIN = 2, mean),
apply(hdt_wa,MARGIN = 2, sd))
View(interactions)
colnames(interactions)<- c("moyenne Elevation:W area 2","ecart type Elevation:W area","moyenne Distance to roadway:W area 4","ecart type Distance to roadway:W area 4")
row.names(interactions)<- c("Cover type 1","Cover type 2","Cover type 3","Cover type 4","Cover type 5","Cover type 6","Cover type 7",)
row.names(interactions)<- c("Cover type 1","Cover type 2","Cover type 3","Cover type 4","Cover type 5","Cover type 6","Cover type 7")
print(interactions)
el_wa <- matrix(NA,nrow = rep,ncol = 7)
hdt_wa <- matrix(NA,nrow = rep,ncol = 7)
for (i in 1:10) {
for (j in 1:7) {
el_wa[i,j] <- L_coeffs[[i]][[j]][56] #coefficient de l'interaction elevation, wilderness area 2
hdt_wa[i,j] <- L_coeffs[[i]][[j]][5] #coefficient de l'interaction horizontal distance to roadway, wilderness area 4
}
}
interactions <- cbind(apply(el_wa,MARGIN = 2, mean),
apply(el_wa,MARGIN = 2, sd),
apply(hdt_wa,MARGIN = 2, mean),
apply(hdt_wa,MARGIN = 2, sd))
colnames(interactions)<- c("moyenne Elevation:W area 2","ecart type Elevation:W area","moyenne Distance to roadway:W area 4","ecart type Distance to roadway:W area 4")
row.names(interactions)<- c("Cover type 1","Cover type 2","Cover type 3","Cover type 4","Cover type 5","Cover type 6","Cover type 7")
print(interactions)
table(is.na(forest))
580000/4000
580000*2/3
(580000*2/3)/4000
library(tidyverse)
library(dplyr)
library(FactoMineR)
library(ggplot2)
library(class)
library(ggplot2)
library(corrplot)
library(glmnet) # multinomiale avec pénalité lasso
library(rpart)
library(partykit)
#library(caret)
library(randomForest)
library(randomForestExplainer)
forest = read.table(file = "covtype.data", sep=",", header=TRUE)
a <- rep("Soil_Type_",40)
for (i in 1:40) {
a[i]<-paste0(a[i],as.character(i))
}
name <- c("Elevation",
"Aspect",
"Slope",
"Horizontal_Distance_To_Hydrology",
"Vertical_Distance_To_Hydrology",
"Horizontal_Distance_To_Roadways",
"Hillshade_9am",
"Hillshade_Noon",
"Hillshade_3pm",
"Horizontal_Distance_To_Fire_Points",
"Wilderness_Area_1",
"Wilderness_Area_2",
"Wilderness_Area_3",
"Wilderness_Area_4",
a,
"Cover_Type")
colnames(forest)<- name
Cov_type = forest$Cover_Type
Xforest <- subset(forest, select = -Cover_Type)
#pcaXforest <- PCA(Xforest, ncp = 2)
par(mfrow=c(2,3))
for (i in 1:3) {
boxplot(forest[,i],pch=16,col='salmon',xlab=colnames(forest)[i])
}
str(forest)
par(mfrow=c(2,3))
for (i in 1:6) {
boxplot(forest[,i],pch=16,col='salmon',xlab=colnames(forest)[i])
}
quali <- apply(forest[,11:54], MARGIN = 2, table)
print(as.data.frame(round(100*quali[2,]/(quali[1,]+quali[2,]),digits = 2),optional = TRUE ))
print(as.data.frame(t(round(100*quali[2,]/(quali[1,]+quali[2,]),digits = 2),optional = TRUE) ))
t(round(100*quali[2,]/(quali[1,]+quali[2,]),digits = 2),optional = TRUE) )
t(round(100*quali[2,]/(quali[1,]+quali[2,]),digits = 2),optional = TRUE)
print(as.data.frame(t(round(100*quali[2,]/(quali[1,]+quali[2,]),digits = 2)),optional = TRUE ))
print(as.data.frame(t(round(100*quali[2,]/(quali[1,]+quali[2,]),digits = 2)),optional = TRUE )[,1:4])
print(as.data.frame(round(100*quali[2,]/(quali[1,]+quali[2,]),digits = 2),optional = TRUE )[,1:4])
print(as.data.frame(round(100*quali[2,]/(quali[1,]+quali[2,]),digits = 2),optional = TRUE )[1:4,])
# variables X quantitatives
par(mfrow=c(1,2))
for (i in c(1,6)) {
boxplot(Xforest[,i]~Cov_type,ylab=colnames(Xforest)[i],xlab = "Cover type")
}
table(forest$Cover_Type)
sum(table(forest$Cover_Type))
#str(forest)
table(forest$Cover_Type)/sum(table(forest$Cover_Type))
#str(forest)
100*table(forest$Cover_Type)/sum(table(forest$Cover_Type))
# variables X qualitatives
temp_forest <- Xforest
temp_forest[,11:54][temp_forest[,11:54] == 0] <- NA
temp_forest <- pivot_longer(temp_forest,cols = seq(15,54),names_to = "Soil_type",values_to = "pres_abs", values_drop_na = TRUE)
#moche mais fonctionne
temp_forest <- pivot_longer(temp_forest,cols = seq(11,14),names_to = "Wilderness_area",values_to = "pres_ab", values_drop_na = TRUE)
temp_forest <- temp_forest[,-c(12,14)]
# Interactions possibles entre les variables qualitatives et quantitatives
for (i in 1:10) {
par(mfrow=c(1,2))
boxplot(temp_forest[,i]~temp_forest$Wilderness_area, varwidth = TRUE, ylab = colnames(temp_forest)[i], xlab = "Wilderness area", main = "", xaxt = "n")
boxplot(temp_forest[,i]~temp_forest$Soil_type, varwidth = TRUE, ylab = colnames(temp_forest)[i], xlab = "Soil type ", main = "", xaxt = "n")
}
for (i in 1:10) {
par(mfrow=c(1,2))
boxplot(temp_forest[,i]~temp_forest$Wilderness_area, varwidth = TRUE, ylab = colnames(temp_forest)[i], xlab = "Wilderness area", main = "", xaxt = "n")
boxplot(temp_forest[,i]~temp_forest$Soil_type, varwidth = TRUE, ylab = colnames(temp_forest)[i], xlab = "Soil type ", main = "", xaxt = "n")
}
# variables X qualitatives
temp_forest <- Xforest
temp_forest[,11:54][temp_forest[,11:54] == 0] <- NA
temp_forest[,11:54][temp_forest[,11:54] == 0] <- NA
temp_forest <- pivot_longer(temp_forest,cols = seq(15,54),names_to = "Soil_type",values_to = "pres_abs", values_drop_na = TRUE)
temp_forest[,11:54][temp_forest[,11:54] == 0] <- NA
# variables X qualitatives
temp_forest <- Xforest
temp_forest[,11:54][temp_forest[,-c(1:10)] == 0] <- NA
temp_forest <- pivot_longer(temp_forest,cols = seq(15,54),names_to = "Soil_type",values_to = "pres_abs", values_drop_na = TRUE)
temp_forest <- pivot_longer(temp_forest,cols = seq(11,14),names_to = "Wilderness_area",values_to = "pres_ab", values_drop_na = TRUE)
temp_forest <- temp_forest[,-c(12,14)]
for (i in 1:10) {
par(mfrow=c(1,2))
boxplot(temp_forest[,i]~temp_forest$Wilderness_area, varwidth = TRUE, ylab = colnames(temp_forest)[i], xlab = "Wilderness area", main = "", xaxt = "n")
boxplot(temp_forest[,i]~temp_forest$Soil_type, varwidth = TRUE, ylab = colnames(temp_forest)[i], xlab = "Soil type ", main = "", xaxt = "n")
}
View(temp_forest)
ggplot()+
geom_boxplot(aes(x=temp_forest[,i], group = temp_forest$Wilderness_area))+
ylab(colnames(temp_forest)[i])+
xlab("Wilderness area")+
labs(title = "")
i=1
ggplot()+
geom_boxplot(aes(x=temp_forest[,i], color = temp_forest$Wilderness_area))+
ylab(colnames(temp_forest)[i])+
xlab("Wilderness area")+
labs(title = "")
boxplot(temp_forest$Horizontal_Distance_To_Fire_Points~temp_forest$Wilderness_area, varwidth = TRUE, ylab = "Horizontal_Distance_To_Fire_Points", xlab = "Wilderness area", main = "", xaxt = "n")
library(tidyverse)
library(dplyr)
library(FactoMineR)
library(ggplot2)
library(class)
library(ggplot2)
library(corrplot)
library(glmnet) # multinomiale avec pénalité lasso
library(rpart)
library(partykit)
#library(caret)
library(randomForest)
library(randomForestExplainer)
forest = read.table(file = "covtype.data", sep=",", header=TRUE)
a <- rep("Soil_Type_",40)
for (i in 1:40) {
a[i]<-paste0(a[i],as.character(i))
}
name <- c("Elevation",
"Aspect",
"Slope",
"Horizontal_Distance_To_Hydrology",
"Vertical_Distance_To_Hydrology",
"Horizontal_Distance_To_Roadways",
"Hillshade_9am",
"Hillshade_Noon",
"Hillshade_3pm",
"Horizontal_Distance_To_Fire_Points",
"Wilderness_Area_1",
"Wilderness_Area_2",
"Wilderness_Area_3",
"Wilderness_Area_4",
a,
"Cover_Type")
colnames(forest)<- name
Cov_type = forest$Cover_Type
Xforest <- subset(forest, select = -Cover_Type)
pcaXforest <- PCA(Xforest, ncp = 2)
quali <- apply(forest[,11:54], MARGIN = 2, table)
# variables X quantitatives
par(mfrow=c(1,2))
for (i in c(1,6)) {
boxplot(Xforest[,i]~Cov_type,ylab=colnames(Xforest)[i],xlab = "Cover type")
}
